license()
above10 <-function(x,n) {
value <- x>n
x[value]
}
5,2
x <-c(1:100)
above10 <-function(x,n) {
value <- x>n
x[value]
}
above10(x,75)
above10 <-function(x,n=10) {
value <- x>n
x[value]
}
above10(x)
library(readr)
airquality <- read_csv("C:/Sudipto BI/Sudipto/DataScience_coursera/Course_2_R_Programming/quiz1_data/hw1_data.csv")
View(airquality)
columnmean <-function(x,ctrl=FALSE){
colcount<-NCOL(x)
means <-numeric(colcount)
for(j in 1:colcount){
means <- mean(x[,j],na.rm = ctrl)
}
means
}
columnmean(airquality)
columnmean <-function(x,ctrl = FALSE){
colcount<- NCOL(x)
means <- numeric(colcount)
for(j in 1:colcount){
means <- mean(x[,j], na.rm = ctrl)
}
means
}
columnmean(airquality)
airquality
columnmean <-function(x,ctrl = TRUE){
colcount<- NCOL(x)
means <- numeric(colcount)
for(j in 1:colcount){
means <- mean(x[,j], na.rm = ctrl)
}
means
}
columnmean(airquality)
View(airquality)
search()
make.power <- function(n){
pow <-function(x){
x^n
}
pow
}
make.power(3)
cube <-make.power(3)
cube(2)
f <-function(x){
y<-2
y^2+g(x)
}
g <-function(x){
x*Y
}
f(2)
f <-function(x){
y<-2
y^2+g(x)
}
g <-function(x){
x*y
}
f(2)
y <-10
f(2)
f(3)
g(3)
? strptime
cube <-function (x,n){}
cube <-function (x,n){x^3}
cube(3)
x<- 1:10
if (x>5){x<-0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
Z<-10
f(3)
l<-3
l<-5
y <-if(l<3){NA}else{10}
y
install.packages("swirl")
r.version
R.version.string
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
rm()
ls()
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1,1,9,3.14)
z
info()
nxt()
z <-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls ()
x<-9
ls ()
dir()
getwd()
?list
?list.files
args(list.files())
args(list.files)
ls
args(list.files)
old.dir <-getwd()
play()
old.dir <-getwd()
old.dir
setwd("C:\Sudipto BI\Sudipto\DataScience_coursera\R_Code")
setwd("C:\"Sudipto BI"\Sudipto\DataScience_coursera\R_Code")
setwd("C:\Sudipto_BI\Sudipto\DataScience_coursera\R_Code")
setwd("C:/Sudipto_BI/Sudipto/DataScience_coursera/R_Code")
getwd()
nxt()
getwd()
old.dir
old.dir <-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.r")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R",mytest3.R)
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
getwd()
file.path("C:","Sudipto_BI","Sudipto","DataScience_coursera","R_Code","testdir")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2",
"testdir3"),recursive = TRUE)
setdw(old.dir)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect <1
tf
num_vect>=6
my_char <- c("my","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Sudipto")
my_name
paste(my_name,collapse = " ")
paste("hello","world",sep=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="")
paste(LETTERS,1:4,sep="_")
paste(LETTERS,1:4,sep="-")
x <-c(44,NA,5,NA)
3x
x*3
y <-rnorm(1000)
z <- rep(NA,times=1000)
z <- rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[ix.na(x)]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-(foo=11,bar=2,norf=NA)
vect <-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo"),"bar","norf)
names(vect2) <- c("foo","bar","norf)
)
""
"
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <-c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrx = my_vector
my_matrx <-c(my_vector)
my_matrx <- (my_vector)
my_matrix
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4,ncol=5)
identical(my_matrix,my_matrix2)
patients <-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <-cnames
my_data
exit
close
bye
quit
q
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5 !=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE
)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(int<0)
any(ints<0)
all(ints>0)
sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
submit()
submit()
remainder(5)
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1], c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){tail(x,n=1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Neo)
telegram("Neo"")
telegram("Neo")
telegram("Neo")
submit()
mad_libs(place="Tokyo",adjective="University",noun="Camera")
submit()
submit()
submit()
submit()
"I Love" %p% "R!"
"I" %p% Love" %p% "R!"
"I" %p% "Love" %p% "R!"
info()
skip()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
quit
setwd(C:\)
setwd(C:/)
setwd(C:sudipto\sudipto_bi)
setwd(C:sudipto/sudipto_bi)
setw(C:/Sudipto_BI/Sudipto/DataScience_coursera/R_Code)
setwd(C:/Sudipto_BI/Sudipto/DataScience_coursera/R_Code)
setwd("C:/Sudipto_BI/Sudipto/DataScience_coursera/R_Code")
test_frame <- read.csv(file="testdir/Test_data.csv",header=TRUE,sep = ",")
test_frame
test_frame[36,]
data.frame(36,SUL)
data.frame(36,,,SUL)
data.frame(,SUL)
data.frame(,$SUL)
test_frame[36,SUL]
test_frame[36,4]
test_frame[36,3,4]
test_frame[36,c(1,2,3,4)]
test_frame[36,c(1,2,4)]
test_frame[36,c("SUL")]
test_frame[36,c("SUL","ID")]
test_frame[C(1:120),c("SUL","ID")]
test_frame[C(36),c("SUL","ID")]
test_frame[C(36),]
test_frame[(36),]
library(dplyr)
dplyr
x<-test_frame[is.na.data.frame(test_frame)]
x
x <- is.na(test_frame)
x
length(x)
x <- !is.na(test_frame)
x
y <- complete.cases(test_frame)
y
x<-is.na(test_frame[,4])
length(x)
x <- complete.cases(test_frame[,4])
x
length(x)
(length(x) which "FALSE")
(length(x(FALSE)))
sum(length(which(is.na(x))))
sum(length(which(is.na(test_frame[,4]))))
sum(length(which(is.na(test_frame[,3]))))
sum(length(which(is.na(test_frame[,]))))
x < - test_frame[,3]
y < - test_frame[,3]
test_frame
test_frame[,3]
class(test_frame)
test_frame[,3]
test_frame[30,]
test_frame[30,c(1,3)]
